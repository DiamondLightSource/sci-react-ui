"use strict";(self.webpackChunk_diamondlightsource_sci_react_ui=self.webpackChunk_diamondlightsource_sci_react_ui||[]).push([[606],{"./src/components/controls/ScrollableImages.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{All:()=>All,DifferentBackgroundColour:()=>DifferentBackgroundColour,DynamicImages:()=>DynamicImages,NoButtons:()=>NoButtons,NoNumbers:()=>NoNumbers,NoSlider:()=>NoSlider,NoWrap:()=>NoWrap,OneImage:()=>OneImage,TiffImage:()=>TiffImage,__namedExportsOrder:()=>__namedExportsOrder,default:()=>ScrollableImages_stories});var jsx_runtime=__webpack_require__("./node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-runtime.js"),ScrollableImages=__webpack_require__("./src/components/controls/ScrollableImages.tsx");const diamond_namespaceObject=__webpack_require__.p+"static/media/diamond.be6c00a4.jpg",soleil_namespaceObject=__webpack_require__.p+"static/media/soleil.1b26f79b.jpg",bessy_namespaceObject=__webpack_require__.p+"static/media/bessy.3dcb1a39.jpg",shanghai_namespaceObject=__webpack_require__.p+"static/media/shanghai.99a745d0.jpg";var react=__webpack_require__("./node_modules/.pnpm/react@18.3.1/node_modules/react/index.js");const ScrollableImages_stories={title:"Components/Controls/ScrollableImages",component:ScrollableImages.M,tags:["autodocs"]},imagesList=[{src:diamond_namespaceObject,alt:"Diamond"},{src:soleil_namespaceObject,alt:"Soleil"},{src:bessy_namespaceObject,alt:"Bessy"},{src:shanghai_namespaceObject,alt:"Shanghai"}],All={args:{images:imagesList,width:300,height:300}},NoButtons={args:{images:imagesList,buttons:!1}},NoWrap={args:{images:imagesList,wrapAround:!1}},NoSlider={args:{images:imagesList,slider:!1}},NoNumbers={args:{images:imagesList,numeration:!1}},DifferentBackgroundColour={args:{images:imagesList,backgroundColor:"#166"}},OneImage={args:{images:imagesList[0]}},DynamicImages={render:()=>{const[visibleImages,setVisibleImages]=(0,react.useState)(imagesList);let nImages=1;return(0,react.useEffect)((()=>{let increment=1;const interval=setInterval((()=>{setVisibleImages(imagesList.slice(0,nImages)),nImages+=increment,nImages===imagesList.length?increment=-1:1===nImages&&(increment=1)}),2e3);return()=>clearInterval(interval)}),[]),(0,jsx_runtime.jsx)(ScrollableImages.M,{images:visibleImages,width:300,height:300,buttons:!0,slider:!0,numeration:!0})}},TiffImage={args:{images:[{src:"/images/multi-page-tiff.tiff",alt:"Tiff"}]}},__namedExportsOrder=["All","NoButtons","NoWrap","NoSlider","NoNumbers","DifferentBackgroundColour","OneImage","DynamicImages","TiffImage"];All.parameters={...All.parameters,docs:{...All.parameters?.docs,source:{originalSource:"{\n  args: {\n    images: imagesList,\n    width: 300,\n    height: 300\n  }\n}",...All.parameters?.docs?.source}}},NoButtons.parameters={...NoButtons.parameters,docs:{...NoButtons.parameters?.docs,source:{originalSource:"{\n  args: {\n    images: imagesList,\n    buttons: false\n  }\n}",...NoButtons.parameters?.docs?.source}}},NoWrap.parameters={...NoWrap.parameters,docs:{...NoWrap.parameters?.docs,source:{originalSource:"{\n  args: {\n    images: imagesList,\n    wrapAround: false\n  }\n}",...NoWrap.parameters?.docs?.source}}},NoSlider.parameters={...NoSlider.parameters,docs:{...NoSlider.parameters?.docs,source:{originalSource:"{\n  args: {\n    images: imagesList,\n    slider: false\n  }\n}",...NoSlider.parameters?.docs?.source}}},NoNumbers.parameters={...NoNumbers.parameters,docs:{...NoNumbers.parameters?.docs,source:{originalSource:"{\n  args: {\n    images: imagesList,\n    numeration: false\n  }\n}",...NoNumbers.parameters?.docs?.source}}},DifferentBackgroundColour.parameters={...DifferentBackgroundColour.parameters,docs:{...DifferentBackgroundColour.parameters?.docs,source:{originalSource:'{\n  args: {\n    images: imagesList,\n    backgroundColor: "#166"\n  }\n}',...DifferentBackgroundColour.parameters?.docs?.source}}},OneImage.parameters={...OneImage.parameters,docs:{...OneImage.parameters?.docs,source:{originalSource:"{\n  args: {\n    images: imagesList[0]\n  }\n}",...OneImage.parameters?.docs?.source}}},DynamicImages.parameters={...DynamicImages.parameters,docs:{...DynamicImages.parameters?.docs,source:{originalSource:"{\n  render: () => {\n    const [visibleImages, setVisibleImages] = useState(imagesList);\n    let nImages = 1;\n    useEffect(() => {\n      let increment = 1;\n      const interval = setInterval(() => {\n        setVisibleImages(imagesList.slice(0, nImages));\n        nImages += increment;\n        if (nImages === imagesList.length) {\n          increment = -1;\n        } else if (nImages === 1) {\n          increment = 1;\n        }\n      }, 2000);\n      return () => clearInterval(interval);\n    }, []);\n    return <ScrollableImages images={visibleImages} width={300} height={300} buttons slider numeration />;\n  }\n}",...DynamicImages.parameters?.docs?.source}}},TiffImage.parameters={...TiffImage.parameters,docs:{...TiffImage.parameters?.docs,source:{originalSource:"{\n  args: {\n    images: tiffImage\n  }\n}",...TiffImage.parameters?.docs?.source}}}}}]);